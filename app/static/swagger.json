{
    "openapi": "3.0.0",
    "info": {
        "description": "DMarket API Requests",
        "title": "DMarket API Documentation",
        "version": "1.0.0"
    },
    "paths": {
        "/products": {
            "get": {
                "summary": "List all products available in the 'products' database.",
                "description": "Returns a list of Products available in the 'products' database or a message if no product is available.",
                "operationId": "getProducts",
                "tags": [
                    "Products"
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of Products available in the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetProduct"
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Returns a message if there are no Products available in the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "emptyDatabase": {
                                        "summary": "The 'products' database is empty.",
                                        "value": {
                                            "message": "The products database is empty."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/create": {
            "post": {
                "summary": "Add a new product to the 'products' database, through 'Request Body'.",
                "operationId": "addProduct",
                "description": "Returns a message if the product was added or an error ocurred.",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductInput"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Product added successfully to the 'products' database."
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "MissingName": {
                                        "summary": "Missing name",
                                        "value": {
                                            "message": "Name is required"
                                        }
                                    },
                                    "MissingPrice": {
                                        "summary": "Missing price",
                                        "value": {
                                            "message": "Price is required"
                                        }
                                    },
                                    "MissingQuantity": {
                                        "summary": "Missing quantity",
                                        "value": {
                                            "message": "Quantity is required"
                                        }
                                    },
                                    "InvalidPrice": {
                                        "summary": "Invalid price",
                                        "value": {
                                            "message": "Price must be a number"
                                        }
                                    },
                                    "InvalidQuantity": {
                                        "summary": "Invalid quantity",
                                        "value": {
                                            "message": "Quantity must be an integer"
                                        }
                                    },
                                    "PriceTooLow": {
                                        "summary": "Price too low",
                                        "value": {
                                            "message": "Price must be higher than 0"
                                        }
                                    },
                                    "QuantityTooLow": {
                                        "summary": "Quantity too low",
                                        "value": {
                                            "message": "Quantity must be higher than 0"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{product_id}/update":{
            "put": {
                "summary": "Update an existing product's description, price, and quantity in the 'products' database, through 'Request Body'.",
                "operationId": "updateProduct",
                "description": "All three elements are optional. Returns a message if the product was updated or an error ocurred.",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content":{
                        "application/json":{
                            "schema":{
                                "$ref":"#/components/schemas/ProductUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Product updated successfully in the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Success": {
                                        "summary": "Update successful",
                                        "value": {
                                            "message": "Product updated successfully!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "InvalidPrice": {
                                        "summary": "Invalid price",
                                        "value": {
                                            "message": "Price must be a number"
                                        }
                                    },
                                    "InvalidQuantity": {
                                        "summary": "Invalid quantity",
                                        "value": {
                                            "message": "Quantity must be an integer"
                                        }
                                    },
                                    "PriceTooLow": {
                                        "summary": "Price too low",
                                        "value": {
                                            "message": "Price must be higher than 0"
                                        }
                                    },
                                    "QuantityTooLow": {
                                        "summary": "Quantity too low",
                                        "value": {
                                            "message": "Quantity must be higher than 0"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404":{
                        "description": "Product not found in the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "NotFound": {
                                        "summary": "Product not found",
                                        "value": {
                                            "message": "Product not found"
                                        }
                                    }
                                }
                            }
                        } 
                    }
                }
            }
        },
        "/products/{product_id}/delete": {
            "delete": {
                "summary": "Delete a product from the 'products' database.",
                "operationId": "deleteProduct",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {  
                        "description": "Product deleted successfully from the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Success": {
                                        "summary": "Product deleted successfully.",
                                        "value": {
                                            "message": "Product deleted successfully."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found in the 'products' database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "NotFound": {
                                        "summary": "Product not found",
                                        "value": {
                                            "message": "Product not found"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ProductInput": {
                "type": "object",
                "description": "This is the schema used for the 'POST' Method. It doesn't have the 'ID' available because it is automatically calculated based on how many items are inside the 'product' database.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The product name."
                    },
                    "description": {
                        "type": "string",
                        "description": "The product description."
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "The product price."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The product quantity."
                    }
                },
                "required": [
                    "name",
                    "price",
                    "quantity"
                ]
            },
            "GetProduct": {
                "type": "object",
                "description": "This is the schema used for the 'GET' Method. It returns every property, and its values, available in the 'products' database. ",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The product id."
                    },
                    "name": {
                        "type": "string",
                        "description": "The product name."
                    },
                    "description": {
                        "type": "string",
                        "description": "The product description."
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "The product price."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The product quantity."
                    }
                },
                "required": [
                    "name",
                    "price",
                    "quantity"
                ]
            },
            "ProductUpdate": {
                "type": "object",
                "description": "This is the schema used for the 'PUT' Method. It allows updating the 'description', 'price', and 'quantity' of a product.",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The product description."
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "description": "The product price."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The product quantity."
                    }
                }
            }
        }
    }
}